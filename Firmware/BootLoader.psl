struct GlobalData
{
    word stack[128];
};

GlobalData globalData;

word ReadWord()
{
    // Position in byte we receive
    word bytePos = 0;

    // The word we are currently packing
    word currentWord = 0;
    
    word i = 0;
    while (bytePos .< 4)
    {
        word input = readport(1);
        if (input >. 255)
        {
            // Pack into the word
            packbyte(currentWord, input, bytePos);

            bytePos = bytePos + 1;
        }
    }

    return currentWord;
}

//void WriteWord(word sendWord)
//{
    // Spit something out to trace that we are here
    //__emit(doutr, 0x0f00d1e1);

    // Position in byte we receive
    //word bytePos = 0;

    //while (bytePos .< 4)
    //{
        //writeport(3, sendWord);

        //sendWord = sendWord >> 8;
        //bytePos = bytePos + 1;
    //}
//}

void main()
{
    // Set up the stack
    __emit(movrr, __rsp, globalData.stack);

    // For now this is a dummy for doing a loop
    word i = 0;

    // Position in word array
    word wordPos = 0;

    // The collection of words
    ptr<word> pData = castptr<word>(__datasegmentend);

    // Wait for a packet starting with the right value
    while (i .< 1)
    {
        word currentWord = ReadWord();

        // Print that business
        __emit(doutr, currentWord);

        // Store that business
        pData[wordPos] = currentWord;

        // Next word
        wordPos = wordPos + 1;

        // Program needs header and length
        if (wordPos >. 2)
        {
            // Correct header
            if (0x1337beef == pData[0])
            {
                // Did we get all of the words in the program?
                if (wordPos - 2 == pData[1])
                {
                    __saveregisters
                    {
                        // Execute - we need to skip the 8 byte header
                        __emit(execr, offsetptr<word>(pData, 8));
                    }

                    // One last statement before execute
                    //__emit(doutr, 0x0f00d1e0);

                    // Figure out how many debug values to send
                    //word debugLength = 0;
                    //__emit(dlenr, debugLength);

                    // First send the word count
                    //WriteWord(debugLength);

                    // Since we are coming back, reset word count
                    wordPos = 0;
                }
            }
        }
    }
}

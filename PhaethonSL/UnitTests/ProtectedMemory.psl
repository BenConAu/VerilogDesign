struct PTEntry
{
    word virtPage;
    word physPage;
};

struct PageTable
{
    PTEntry entries[64];
};

struct Stack
{
    word entries[32];
};

PageTable kernelPageTable;
PageTable userPageTable;
Stack stack;

void main()
{
    ptr<word> stackPtr = stack.entries;
    __emit(movrr, __rsp, stackPtr);

    // The collection of words for the program doing invalid things,
    // which we put into a page after the first two pages.
    ptr<word> pData = castptr<word>(0xf000);
    pData[0] =  0xef000002;
    pData[1] =  0x00001000;
    pData[2] =  0xef000101;
    pData[3] =  0xef000202;
    pData[4] =  0x00000000;
    pData[5] =  0xef010302;
    pData[6] =  0x00000001;
    pData[7] =  0x03020109;
    pData[8] =  0x00000004;
    pData[9] =  0xef340102;
    pData[10] = 0x00001234;
    pData[11] = 0xefef012f;
    pData[12] = 0xefefef35;

    __emit(doutr, 0x1);    

    // We need a 'clean' page table for this to work, at least for the
    // first two pages. Map first page in both physical and virtual to 
    // same, and protect this page so that it cannot be messed with by
    // the user mode code.
    word i = 0;
    while (i .< 4)
    {
        kernelPageTable.entries[i].virtPage = 0x40000000 + i;
        kernelPageTable.entries[i].physPage = i;

        i = i + 1;
    }

    // Clear out the user mode page table with protected pages pointing
    // back to the first page. This way anything out of range will
    // hit the protected page code.
    i = 0;
    while (i .< 4)
    {
        userPageTable.entries[i].virtPage = 0x40000000 + i;
        userPageTable.entries[i].physPage = 0;

        i = i + 1;
    }

    // And just have a single entry pointing to page F
    userPageTable.entries[0].virtPage = 0;
    userPageTable.entries[0].physPage = 0xf;

    __emit(doutr, 0x2);    

    // Set the page tables
    ptr<PTEntry> pK = kernelPageTable.entries;
    ptr<PTEntry> pU = userPageTable.entries;

    __emit(movrr, __rkpt, pK);
    __emit(movrr, __rupt, pU);

    // Turn on virtual memory
    __emit(vpenable);

    // A message before we run the bad program
    __emit(doutr, 0x5678);

    ptr<word> pVirtData = castptr<word>(0x4000);

    // Run the program
    __saveregisters
    {
        __emit(execr, pVirtData);
    }    

    // A message after we run the bad program
    __emit(doutr, 0xabcd);
}

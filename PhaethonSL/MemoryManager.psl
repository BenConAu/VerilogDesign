// Each allocation has one of these
struct AllocationBlock
{
    ptr<AllocationBlock> Next;  // Pointer to next block
    word Available;             // Available bytes left in this block
    word Count;                 // Number of allocations in this block
    ptr<void> pLastStart;       // Where to start subtracting the last allocation
    word AllocLengths[1];       // Lengths of allocations, each one starting from the end
};

// Something to hold the start of the allocations
struct AllocationHeader
{
    ptr<AllocationBlock> First;
    ptr<void> NextBlockAddr;
};

// The actual header
AllocationHeader Header;

void MemoryInit()
{
    // Initialize the first one with an empty allocation
    Header.First = castptr<AllocationBlock>(__datasegmentend);
    Header.First->Next = nullptr;

    // The block info is eating some of the space
    Header.First->Available = 512 - sizeof(AllocationBlock) + sizeof(word);
    Header.First->Count = 0;
    Header.First->pLastStart = offsetptr<void>(__datasegmentend, 512);

    // First block ate 512
    Header.NextBlockAddr = offsetptr<void>(__datasegmentend, 512);
}

ptr<T> MemoryAlloc<T>(word size)
{
    // Loop through the allocations to find the end
    ptr<AllocationBlock> pCurrent = Header.First;

    // TODO: Loop through blocks

    if (pCurrent->Available < size)
    {
        return nullptr; // Oh well
    }

    // Remember what we will return
    ptr<T> pReturn = castptr<T>(pCurrent->pLastStart);

    // Calculate where the next one is
    pCurrent->Available = pCurrent->Available - size;
    pCurrent->Count = pCurrent->Count + 1;
    pCurrent->pLastStart = offsetptr<void>(pCurrent->pLastStart, -size);

    return pReturn;
}

void MemoryFree(ptr<void> allocation)
{
}

void main()
{
    MemoryInit();

    // Where does the data segment end?
    debugout(__datasegmentend);

    ptr<void> alloc1 = MemoryAlloc<void>(100);

    // Where did this memory end up?
    debugout(alloc1);
}

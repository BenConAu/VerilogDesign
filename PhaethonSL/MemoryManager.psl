// Each allocation has one of these
struct Allocation
{
    ptr<Allocation> next;
    word length;
};

// Something to hold the start of the allocations
struct AllocationHeader
{
    ptr<Allocation> first;
};

// The actual header
AllocationHeader header;

void MemoryInit()
{
    // Initialize the first one with an empty allocation
    header.first = castptr<Allocation>(__datasegmentend);
    header.first->next = nullptr;
    header.first->length = 0;
}

ptr<T> MemoryAlloc<T>(word size)
{
    // Loop through the allocations to find the end
    ptr<Allocation> last = header.first;
    while(last->next != nullptr)
    {
        last = last->next;
    }

    // Calculate where the next one is
    ptr<void> newPos = offsetptr(castptr<void>(last), sizeof(Allocation) + last->length);
    ptr<void> newMem = offsetptr(newPos, sizeof(Allocation));

    // Fill in the new one
    ptr<Allocation> newAlloc = castptr<Allocation>(newPos);
    newAlloc->next = nullptr;
    newAlloc->length = size;

    // Attach it
    last->next = newAlloc;

    // return new pointer value
    return castptr<T>(newMem);
}

void MemoryFree(ptr<void> allocation)
{
}

void main()
{
    MemoryInit();

    ptr<void> alloc1;
    alloc1 = MemoryAlloc(100);
}

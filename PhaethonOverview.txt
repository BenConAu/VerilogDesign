Phaethon

Phaethon is an FPGA design project to explore what a ray tracing GPU would look like
at a hardware level. It is meant to explore what novel enhancements would be needed
at the ALU level to move the needle. By building a good enough stack, you can experiment
with new instructions that could drastically increase memory bandwidth efficiency or
scheduling.

Directory Structure

In order of grokking:

PhaethonISA - this contains the basic instruction set definition that both the Verilog
and software projects use. This is defined in this way so that the opcodes and operand
structures can be consistent between the object format and the Verilog.

PhaethonHDL - this contains the Verilog modules that define the hardware.

PhaethonObjWriter - this is the code for outputting the object format that Phaethon runs
on. It is shared by both the assembler and high level language.

PhaethonAsm - this is an assembler for the Phaethon assembly language.

PhaethonSL - this is a compiler for the Phaethon high level shading language.

PhaethonEmu - this is an emulator for the Phaethon hardware. It is out of date, but
valuable to debug some things that the verilog simulator makes it hard to verify.

Instruction Set Overview

The Phaethon instruction set is designed to be simple to implement, but allow for powerful
instructions to be added to the instruction set. An attempt has been made to allow for
cooperative development between the hardware, the instruction set and the high level
language for shader development.

Only move instructions have variants beyond registers and constants. This is intended
to push most code generation towards using registers.

Function calls can be done through traditional stack means, or through using register
window shifting. After a window shift, the r0 register becomes the first argument to
the function being called.

Hardware definition

The instruction set is defined in PhaethonISA in InstructionSet.def. This file details
the opcodes and operand forms for the instruction set.

Shader Language Overview

The shader language is not meant to be a high level language like C# or Java but rather 
a very low level procedural language in the spirit of B. Structure types are added on 
top of the register represented types of the hardware.

Expressions therefore output either a structure or a member of a structure. The only
operators allowed on structures is field access.

The language is strongly typed with the following types:

int
float
pointer (refined with template like syntax to codify type)
struct (user defined)

Locally defined variables in functions have to be non-struct types. Global variables
must be structures. This allows the code generation to have structures always store
a 'this' pointer into a register, and have other variables be assigned a register.

How to update the ISA

- Update InstructionSet.def with the new instruction
- 'make' in PhaethonISA
- Now update PhaethonHDL with implementation of the instruction
- 'make' in PhaethonAsm

Instruction Set Overview

The Phaethon instruction set is designed to be simple to implement, but allow for powerful
instructions to be added to the instruction set. An attempt has been made to allow for
cooperative development between the hardware, the instruction set and the high level
language for shader development.

Only move instructions have variants beyond registers and constants. This is intended
to push most code generation towards using registers.

Function calls can be done through traditional stack means, or through using register
window shifting. After a window shift, the r0 register becomes the first argument to
the function being called.

Hardware definition

The instruction set is defined in PhaethonISA in InstructionSet.def. This file details
the opcodes and operand forms for the instruction set.

Shader Language Overview

The shader language is not meant to be a high level language but rather a very low
level procedural language in the spirit of B. Structure types are added on top of
the register represented types of the hardware.

Expressions therefore output either a structure or a member of a structure. The only
operators allowed on structures is field access.

The language is strongly typed with the following types:

int
float
struct

How to update the ISA

- Update InstructionSet.def with the new instruction
- 'make' in PhaethonISA
- Now update PhaethonHDL with implementation of the instruction
- 'make' in PhaethonAsm
